<!DOCTYPE html>
<html lang="en">

<head>
    <title>휴게소 바로 주문</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <script src="https://kit.fontawesome.com/1853ff613c.js" crossorigin="anonymous"></script>   
    <script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=n3vtp4e5n6"></script>
</head>


<body>
    <nav class="navbar navbar-inverse">
        <div class="container-fluid">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="/home"><i class="fas fa-utensils" style="color:#ffff; font-size:25px"></i></a>
            </div>
            <div class="collapse navbar-collapse" id="myNavbar">
                <ul class="nav navbar-nav navbar-right">
                    <li><a href="/home"><i class="fas fa-home"></i> Home</a></li>
                </ul>
            </div>
        </div>
    </nav>
    <div style="text-align: center;">
        <h4><i class="fas fa-map-marked-alt" style="font-size:25px; padding-right:10px"></i>지도에서 확인하기</h4>
    </div>

    <div class="panel panel-default" style="margin:20px">
        <div class="panel-body">
            <div id="NaverMap" style="width: 100%; height:400px;"></div>
        </div>
    </div>
    <div style="text-align: center;">
        <h4><i class="fas fa-map-marker-alt" style="font-size:25px"><span id="roadNm"></span></i> 근처 휴게소 목록</h4>
    </div>

    <div class="list-group" id='restareaList' style="margin:20px">
        <!-- <form id='formListItems' > -->
            <div id='listItems'>
                
            </div>
            <div class="text-center" style="padding-top:20px;padding-bottom:50px">
                <button id='btnShowInfo' onclick="showAreaInfo(this)" class="btn btn-info">정보보기</button>
                <button id='btnShowMenu'' onclick="showAreaInfo(this)" class="btn btn-info">메뉴보기</button>
            </div>
        <!-- </form> -->
    </div>
</body>

<script>
    const ajax = $.ajax;
    let rName;
    getLoadNm();

    // 유저의 현재위치 받아오기
    async function getUserPosition() {
        return new Promise((resolve, reject) => {
            var userPosition = {
                lat: null,
                lon: null,
            };
            navigator.geolocation.getCurrentPosition(function (position) {
                userPosition.lat = position.coords.latitude;
                userPosition.lon = position.coords.longitude;
                console.log('a', userPosition.lat, userPosition.lon);
                if (userPosition.lat == null || userPosition.lon == null) {
                    console.log('b', userPosition.lat, userPosition.lon);
                } else {
                    console.log('2');
                    resolve(userPosition);
                }
            })
        })
    }

     // 현재 위치의 도로명 받아오기
     async function getLoadNm() {
        // 현재위치 받기
        //const latlng = await getUserPosition();
        
        //TEST 위치 - 영동고속도로 , 중부고속도로 사이
        const latlng = {
            lat : 37.244542,
            lon : 127.359095,
        }
        
        var map = showMap(latlng);
        showUserMarker(map, latlng);

        // T map 도로명 API
        ajax({
            method:"GET",
            //url:"http://223.39.119.112/tmapv20/road/nearToRoad?version=1",//가까운 도로 찾기 api 요청 url입니다.
            url:"https://apis.openapi.sk.com/tmap/road/nearToRoad?version=1",//가까운 도로 찾기 api 요청 url입니다.
            async : false,
            data:{
                "appKey" : "l7xx81d8228c35324ed3be2ba79ed4c15a67",
                "lon" : latlng.lon,
                "lat" : latlng.lat,
            },
            success:function(response){
                
                var resultHeader, resultlinkPoints;
                
                resultHeader = response.resultData.header;
                resultlinkPoints = response.resultData.linkPoints;
                
                rName = resultHeader.roadName;
                console.log("rName : ",rName);
                document.getElementById('roadNm').innerHTML = rName;

                ajax({
                    url: '/requestRestAreaLatLong',
                    type: 'POST',
                    async: false,

                    success: function (data) {
                        const results = JSON.parse(data);
                        drawRestAreaMarker(results, map);
                        drawList(results, latlng);
                    }
                });
            },
            error: function (request, status, error) {
                console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
            }
        });
    }

    // 휴게소 데이터 받아와서 휴게소 마커 그리기
    function drawRestAreaMarker(data, map) {
        var data = data;
        var HOME_PATH = window.HOME_PATH || '.';

        var bounds = map.getBounds(),
            southWest = bounds.getSW(),
            northEast = bounds.getNE(),
            lngSpan = northEast.lng() - southWest.lng(),
            latSpan = northEast.lat() - southWest.lat();

        var markers = [],
            infoWindows = [];

        for (var i in data) {

            var areaInfo = {
                name: data[i].area_nm,
                code: data[i].area_code,
                latitude: data[i].latitude,
                longitude: data[i].longitude,
            }

            var position = new naver.maps.LatLng(areaInfo.latitude, areaInfo.longitude);

            var marker = new naver.maps.Marker({
                map: map,
                position: position,
            });

            var infoWindow = new naver.maps.InfoWindow({
                content:
                `<div class="container text-left" style="width: 160px;">    
                        <table class="table table-hover">
                            <tr>    
                                <td><strong>${areaInfo.name}휴게소</strong></td>
                            </tr>
                            <tr>    
                                <td><div class="text-center">
                                    <form action="/restAreaInfo">
                                        <input style="display:none" id = "area_code" name = "area_code" value = ${areaInfo.code}>
                                        <input type="submit" class="btn btn-info" value='휴게소정보'>
                                    </form>
                                </td>
                            </tr>
                        </table>    
                    </div>`
            });

            markers.push(marker);
            infoWindows.push(infoWindow);
        };

        naver.maps.Event.addListener(map, 'idle', function() {
            updateMarkers(map, markers);
        });

        function updateMarkers(map, markers) {

            var mapBounds = map.getBounds();
            var marker, position;

            for (var i = 0; i < markers.length; i++) {

                marker = markers[i]
                position = marker.getPosition();

                if (mapBounds.hasLatLng(position)) {
                    showMarker(map, marker);
                } else {
                    hideMarker(map, marker);
                }
            }
        }

        function showMarker(map, marker) {

            if (marker.setMap()) return;
            marker.setMap(map);
        }

        function hideMarker(map, marker) {

            if (!marker.setMap()) return;
            marker.setMap(null);
        }

        // 해당 마커의 인덱스를 seq라는 클로저 변수로 저장하는 이벤트 핸들러를 반환합니다.
        function getClickHandler(seq) {
            return function(e) {
                var marker = markers[seq],
                    infoWindow = infoWindows[seq];

                if (infoWindow.getMap()) {
                    infoWindow.close();
                } else {
                    infoWindow.open(map, marker);
                }
            }
        }

        //마커 클릭이벤트 추가
        for (var i=0, ii=markers.length; i<ii; i++) {
            naver.maps.Event.addListener(markers[i], 'click', getClickHandler(i));
        }

    }

    //지도 띄우기 => 위도, 경도 parameter
    function showMap(latlng){
        var mapOptions = {
        center: new naver.maps.LatLng(latlng.lat, latlng.lon),
        zoom: 13
        };
        var map = new naver.maps.Map('NaverMap', mapOptions);
        return map;
    }
    
    //사용자 위치 마커 띄우기
    function showUserMarker(map, latlng){
        var icon = {
            content : `<i class="fas fa-car-side fa-2x"></i>`,
            size: new naver.maps.Size(70, 70),
            anchor: new naver.maps.Point(0, 0)
        };
        var marker = new naver.maps.Marker({
            position: new naver.maps.LatLng(latlng.lat, latlng.lon),
            map: map,
            icon: icon
        });
    }

    // 휴게소 목록 리스트 그리기
    function drawList(results, currentPos) {
        var iValue = rName.indexOf("고속도로");
        var html = '';

        if (iValue != -1) {
            rName = rName.substring(0, iValue);
        }

        console.log(rName);
        var result_distance = new Array(results.Size);

        for (i in results) {
            var restArea_roadName = results[i].road_nm;
            var idx = restArea_roadName.indexOf("선");
            var new_roadName;
            if(idx != -1){
                new_roadName = restArea_roadName.substring(0, restArea_roadName.length - 1);
            }
            else{
                new_roadName = restArea_roadName;
            }
            if (new_roadName == rName) {
                var distance = {
                    lat: results[i].latitude,
                    lon: results[i].longitude,
                }
                result_distance[i] = new Array(2);
                var dis = computeDistance(currentPos, distance);
                result_distance[i] = [dis, i];
                results[i].road_nm = restArea_roadName;
            }
            
            result_distance.sort(sortFunction);
            
            function sortFunction(a, b) {
                return (a[0] < b[0]) ? -1 : 1;
            }
        }
        
        for (var i = 0; i < 6; i++) {
            var idx = result_distance[i][1];
            html += `<a class="list-group-item">
                        <div class="row">
                            <div class="col-xs-10">
                                <strong>${results[idx].area_nm}휴게소</strong>까지 약 <strong>${result_distance[i][0].toFixed(2)}</strong> KM
                            </div>
                            <div class="col-xs-2">
                                <input type="radio" name="area_code" value="${results[idx].area_code}&${results[idx].area_nm}">
                            </div>
                        </div>
                    </a>`
                }
        document.getElementById('listItems').innerHTML = html;
    }

    // 내부적으로 현재위치에서 휴게소까지의 거리 계산 후 배열 리턴
    function computeDistance(startCoords, destCoords) {
        var startLatRads = degreesToRadians(startCoords.lat);
        var startLongRads = degreesToRadians(startCoords.lon);
        var destLatRads = degreesToRadians(destCoords.lat);
        var destLongRads = degreesToRadians(destCoords.lon);
        var Radius = 6371; //지구의 반경(km)
        var distance = Math.acos(Math.sin(startLatRads) * Math.sin(destLatRads) +
            Math.cos(startLatRads) * Math.cos(destLatRads) *
            Math.cos(startLongRads - destLongRads)) * Radius;
        return distance;
    }
    
    // 원 뭐 반환함
    function degreesToRadians(degrees) {
        radians = (degrees * Math.PI) / 180;
        return radians;
    }

    
    // 정보보기, 메뉴보기 버튼 클릭시 이벤트처리 및 예외처리
    function showAreaInfo(btn) {
        const checkedArea = $("input:radio[name=area_code]:checked").val();
        console.log(checkedArea);
        
        if(checkedArea == undefined) {
            alert('휴게소를 선택하세요');
        } else {
            let code = checkedArea.substring(0, checkedArea.indexOf('&'));
            let name = checkedArea.substring(checkedArea.indexOf('&')+1, checkedArea.length);
            console.log(code,name);

            const btnId = btn.id;
            if(btn.id == 'btnShowInfo') {
                window.location.href = `/restAreaInfo?area_code=${code}&area_nm=${name}`;
            } else {
                window.location.href = `/menuList?area_code=${code}&area_nm=${name}`;
            }
        }
    }

</script>